version: 2.1

commands: 
  add-version-to-bash:
      description: generates & saves most recent version & newly indexed version of capstone container to the bashrc
      steps:
        - run: 
            name: update .bashrc
            command: |
              aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL
              cat <<\EOF >> ~/.bashrc

              #function to add two floating nums
              add() { n="$@"; bc <<< "${n// /+}"; }

              #get most recent capstone version as a number
              export VERSION=$(aws ecr describe-images --repository-name capstone \
                --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags' --output text | tr -d v)
              #index version automatically 
              export INDEX_VERSION=$(add $VERSION 0.1)
              #create new version 
              export NEW_VERSION=$(printf "v%.1f \n" $INDEX_VERSION)
              EOF

  eks-login:
      description: logs into eks and sets proper env variables
      steps:
        - run: 
            name: get account id & url base for all repos
            command: |
              export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
              echo $ACCOUNT_ID
              export ECR_URL=$(aws ecr describe-repositories --repository-names capstone \
              --query 'repositories[0].repositoryUri' | tr -d '"' | cut -d/ -f1)
              echo $ECR_URL
              aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL
        # - run: 
        #     name: set docker creds for aws
        #     command: |
        #       echo $ECR_URL
        #       aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $ECR_URL

  python-install-aws:
    description: installs awscli v2 using pip
    steps:
      - run: 
          name: install aws cli
          command: |
            
            if (aws --version)
            then 
              export AWSV=$(aws --version | cut -d/ -f2 | cut -d. -f1)
              if  [ $(($AWSV>1)) ]
              then
                echo cli already installed
              else
                echo uninstalling old aws version now
                sudo rm -rf /usr/local/aws
                sudo rm /usr/local/bin/aws  
                echo installing new version now
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                aws --version
            fi 
            else  
              echo installing new version now
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              aws --version
            fi

jobs:
    build:
      machine: 
          image: ubuntu-2004:202111-01
      steps:
        - checkout
        - python-install-aws
        - add-version-to-bash
        #- eks-login
        - run:
            name: build docker image
            command: |
              aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL

              echo new version is $NEW_VERSION

              docker build -t capstone:v${NEW_VERSION} .


        - run: 
            name: commit new docker image
            command: |
              aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL
              echo new version is $NEW_VERSION
              docker image ls
              #docker tag "capstone:v${NEW_VERSION}" "${AWS_ECR_ACCOUNT_URL}/capstone:v${CIRCLE_WORKFLOW_ID:0:7}"
              #docker push "${AWS_ECR_ACCOUNT_URL}/capstone:v${CIRCLE_WORKFLOW_ID:0:7}"


    lint:
      docker:
        - image: python:3.7.3-stretch
      steps: 
        - checkout 
        - run: 
            name: set up virtual environment
            command: |
              make setup
              source capstone/bin/activate
              make install
        - run: 
            name: lint
            command: |
              source capstone/bin/activate
              make lint

    test: 
      machine: 
          image: ubuntu-2004:202111-01
      steps:
        - checkout 
        - python-install-aws
        #- eks-login
        - run: 
            name: start docker
            command: |
              aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL
              docker pull "${AWS_ECR_ACCOUNT_URL}/capstone:v${CIRCLE_WORKFLOW_ID:0:7}"
              docker container run -p 80:81 -d "${AWS_ECR_ACCOUNT_URL}/capstone:v${CIRCLE_WORKFLOW_ID:0:7}"
        - run: 
            name: test image
            command: |
              if curl -s localhost | grep "Hello"
              then
                exit 0
              else
                exit 1
              fi


workflows:
  default: 
    jobs: 
        #- lint
        - build
        # - test : 
        #     requires: [lint, build]