version: 2.1

commands: 
  add-version-to-bash:
      description: generates & saves most recent version & newly indexed version of capstone container to the bashrc
      steps:
        - run: 
            name: update .bashrc
            command: ./update-bashrc.sh

  linux-install-aws:
    description: installs awscli v2 using pip
    steps:
      - run: 
          name: install aws cli
          command: |
            
            if (aws --version)
            then 
              export AWSV=$(aws --version | cut -d/ -f2 | cut -d. -f1)
              if  [ $(($AWSV>1)) ]
              then
                echo cli already installed
              else
                echo uninstalling old aws version now
                sudo rm -rf /usr/local/aws
                sudo rm /usr/local/bin/aws  
                echo installing new version now
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                aws --version
            fi 
            else  
              echo installing new version now
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              aws --version
            fi

  linux-install-kubectl:
    description: installs kubernetes
    steps:
      - run: 
          name: install kubectl
          command: |
            sudo curl -o /usr/local/bin/kubectl  \
            https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl

            sudo chmod +x /usr/local/bin/kubectl

            which kubectl


  rollback-update:
    description: rolls back the push to ecr on a failure 
    steps:
      - run: 
          name: gets newest tag and removes newest image
          when: on_fail
          command: |
            export NEW_VERSION=$(aws ecr describe-images --repository-name capstone \
              --query 'sort_by(imageDetails,& imagePushedAt)[*].imageTags' --output text | grep latest | cut -d 'l' -f1 | xargs)
            echo $NEW_VERSION
            aws ecr batch-delete-image --repository-name capstone --image-ids imageTag=${NEW_VERSION}
      - run: 
          name: tags previous version as latest
          when: on_fail
          command: |
            export PREV_DIGEST=$(aws ecr describe-images --repository-name capstone \
              --query 'sort_by(imageDetails,& imagePushedAt)[-2].imageDigest' --output text)

            export PREV_VERSION=$(aws ecr describe-images --repository-name capstone \
              --query 'sort_by(imageDetails,& imagePushedAt)[-2].imageTags' --output text)

            docker pull "${AWS_ECR_ACCOUNT_URL}/capstone:${PREV_VERSION}"

            docker tag "${AWS_ECR_ACCOUNT_URL}/capstone:${PREV_VERSION}" "${AWS_ECR_ACCOUNT_URL}/capstone:latest"
            docker push "${AWS_ECR_ACCOUNT_URL}/capstone:latest"

            #aws ecr batch-get-image --repository-name capstone --image-ids imageDigest=$PREV_DIGEST --query 'images[].imageManifest' --output text > imagemanifest.json

            #aws ecr put-image --repository-name capstone --image-tag latest --image-manifest file://imagemanifest.json

jobs:
    build:
      machine: 
          image: ubuntu-2004:202111-01
      steps:
        - checkout
        - linux-install-aws
        - add-version-to-bash
        - run:
            name: build docker image
            command: |
              aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL
              echo new version is $NEW_VERSION
              docker build -t capstone:${NEW_VERSION} .


        - run: 
            name: commit new docker image
            command: |
              aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL
              echo new version is $NEW_VERSION
              docker image ls
              docker tag "capstone:${NEW_VERSION}" "${AWS_ECR_ACCOUNT_URL}/capstone:${NEW_VERSION}"
              docker tag "capstone:${NEW_VERSION}" "${AWS_ECR_ACCOUNT_URL}/capstone:latest"
              docker push "${AWS_ECR_ACCOUNT_URL}/capstone:latest"
              docker push "${AWS_ECR_ACCOUNT_URL}/capstone:${NEW_VERSION}"


    lint:
      docker:
        - image: python:3.7.3-stretch
      steps: 
        - checkout 
        - linux-install-aws
        - run: 
            name: set up virtual environment
            command: |
              make setup
              source capstone/bin/activate
              make install
        - run: 
            name: lint
            command: |
              source capstone/bin/activate
              make lint
        - rollback-update

    test: 
      machine: 
          image: ubuntu-2004:202111-01
      steps:
        - checkout 
        - linux-install-aws
        - run: 
            name: start docker
            command: |
              aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL
              docker pull "${AWS_ECR_ACCOUNT_URL}/capstone:latest"
              docker container run -p 80:81 -d "${AWS_ECR_ACCOUNT_URL}/capstone:latest"
        - run: 
            name: test image
            command: |
              if curl -s localhost | grep "Hello"
              then
                exit 0
              else
                exit 1
              fi
        - rollback-update

    deploy:
      machine:
          image: ubuntu-2004:202111-01
      steps:
        - checkout
        - linux-install-aws
        - linux-install-kubectl
        - run: 
            name: do rolling deployment
            command: |
              aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL
              aws eks --region us-west-2 update-kubeconfig --name capstone
              export NEW_VERSION=$(aws ecr describe-images --repository-name capstone \
              --query 'sort_by(imageDetails,& imagePushedAt)[*].imageTags' --output text | grep latest | cut -d 'l' -f1 | xargs)
              docker pull "${AWS_ECR_ACCOUNT_URL}/capstone:${NEW_VERSION}"
              kubectl get pods
              kubectl set image deployment/capstone capstone="${AWS_ECR_ACCOUNT_URL}/capstone:${NEW_VERSION}"
        - rollback-update




workflows:
  default: 
    jobs: 
        - build
        - lint :
            requires: [build]
        - test : 
            requires: [lint, build]
        - deploy :
            requires: [test]